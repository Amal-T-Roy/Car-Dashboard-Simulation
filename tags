!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Werror $/;"	m
CallUpdateSpeed	GUI.py	/^def CallUpdateSpeed(Event):$/;"	f
CreateSocket	GUI.py	/^def CreateSocket(port):$/;"	f
Distance_Travelled	Calculations.h	/^int Distance_Travelled(int speed)$/;"	f
Engine_status	GUI.py	/^Engine_status = False$/;"	v
Fuel_Calculator	Calculations.h	/^float Fuel_Calculator(int EngineState,float CurrentFuel)$/;"	f
Get_Engine_Mode	Calculations.h	/^int Get_Engine_Mode(int current_speed,int new_speed)$/;"	f
HandleButtonPress	GUI.py	/^def HandleButtonPress():$/;"	f
INITIAL_FUEL_LEVEL	Calculations.h	8;"	d
INITIAL_ODO_READING	Calculations.h	9;"	d
IPC	GUI.py	/^def IPC():$/;"	f
IgnitionButton	GUI.py	/^    IgnitionButton = Button($/;"	v
Modes	GUI.py	/^Modes = ["OFF", "IDLE", "RUNNING", "ACCELERATING", "DECELERATING"]$/;"	v
ReceiveDataFromServer	GUI.py	/^def ReceiveDataFromServer(socket):$/;"	f
Receive_Data_From_Client	Calculations.h	/^int Receive_Data_From_Client(int sockfd) {$/;"	f
SendDataToServer	GUI.py	/^def SendDataToServer(socket, value):$/;"	f
Send_Data_To_Socket	Calculations.h	/^int Send_Data_To_Socket(int socket, int OdometerReading, int EngineMode, int FuelLevel) {$/;"	f
SliderLabel	GUI.py	/^    SliderLabel = Label(root, text="Adjust speed:")$/;"	v
SpeedSettingSlider	GUI.py	/^    SpeedSettingSlider = Scale($/;"	v
StartButtonPress	GUI.py	/^def StartButtonPress():$/;"	f
UpdateSpeed	GUI.py	/^def UpdateSpeed():$/;"	f
args	GUI.py	/^args = parser.parse_args()  # Parser$/;"	v
bg	GUI.py	/^        bg="red",$/;"	v
border	GUI.py	/^        border=10,$/;"	v
borderwidth	GUI.py	/^        borderwidth=5,$/;"	v
client_socket	GUI.py	/^client_socket = CreateSocket(port)$/;"	v
command	GUI.py	/^        command=CallUpdateSpeed,$/;"	v
command	GUI.py	/^        command=lambda: HandleButtonPress(),$/;"	v
create_display_frame	GUI.py	/^def create_display_frame(root, name, row, column):$/;"	f
default	GUI.py	/^    default=8888$/;"	v
description	GUI.py	/^    description="Car dash board simulation using IPC with sockets"$/;"	v
fg	GUI.py	/^        fg="white",$/;"	v
from_	GUI.py	/^        from_=0,$/;"	v
help	GUI.py	/^    help="Port to connect",$/;"	v
length	GUI.py	/^        length=350,$/;"	v
main	server.c	/^int main()$/;"	f
metavar	GUI.py	/^    metavar="",$/;"	v
name	GUI.py	/^        name="speed",$/;"	v
network_thread	GUI.py	/^network_thread = threading.Thread(target=IPC)$/;"	v
orient	GUI.py	/^        orient=HORIZONTAL,$/;"	v
parser	GUI.py	/^parser = argparse.ArgumentParser($/;"	v
port	GUI.py	/^port = args.port$/;"	v
required	GUI.py	/^    required=False,$/;"	v
resolution	GUI.py	/^        resolution=10,$/;"	v
root	GUI.py	/^    root = Tk()$/;"	v
showvalue	GUI.py	/^        showvalue=True,$/;"	v
text	GUI.py	/^        text="Start\/Stop",$/;"	v
to	GUI.py	/^        to=200,$/;"	v
type	GUI.py	/^    type=int,$/;"	v
